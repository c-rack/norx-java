package co.nstant.in.norx;

import static org.junit.Assert.assertArrayEquals;

import org.junit.Test;

public class Norx64Test extends AbstractNorxTest<Long> {

    private Long[][] tracesG = {
        {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L },
        {
            0x0000000000000001L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000002000000001L, 0x4200004002020000L, 0x2100000001010000L, 0x2000000001010000L },
        {
            0x0000000000000000L, 0x0000000000000001L, 0x0000000000000000L, 0x0000000000000000L,
            0x0000202000000001L, 0x4200404002020040L, 0x2100000001010020L, 0x2000000001010020L },
        {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000001L, 0x0000000000000000L,
            0x0000200000000000L, 0x0000400000000042L, 0x0000000000000021L, 0x0000000000000020L },
        {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000001L,
            0x0000002000000000L, 0x4200004000020000L, 0x2100000000010000L, 0x2000000000010000L },
        {
            0x8000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x8000001000000000L, 0x2100002001010000L, 0x1080000000808000L, 0x1000000000808000L },
        {
            0x0000000000000000L, 0x8000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
            0x8000101000000000L, 0x2100202001010020L, 0x1080000000808010L, 0x1000000000808010L },
        {
            0x0000000000000000L, 0x0000000000000000L, 0x8000000000000000L, 0x0000000000000000L,
            0x0000100000000000L, 0x0000200000000021L, 0x8000000000000010L, 0x0000000000000010L },
        {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x8000000000000000L,
            0x0000001000000000L, 0x2100002000010000L, 0x1080000000008000L, 0x1000000000008000L },
        {
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL,
            0xFFFFFF5FFFFFFFFEL, 0x35FFFF3FF9F9FFFCL, 0x1AFFFFFFFCFCFFFEL, 0x5FFFFFFFFEFEFFFFL },
        {
            0x0123456789ABCDEFL, 0xFEDCBA9876543210L, 0x0123456789ABCDEFL, 0xFEDCBA9876543210L,
            0x06E0F91F53B5CA4BL, 0x1D4225AFF0B8887DL, 0x26541088639A5752L, 0x5A343C6186E9E1DAL },
    };

    private long[][] tracesF = {
        {
            0x0000004000000401L, 0x2020000400000000L, 0x2000042000000020L, 0x42400888420A0840L,
            0x1008008580981891L, 0x8240004842020800L, 0x4800020A00420200L, 0xC200084042420048L,
            0x4100000021210004L, 0x8844080A80440408L, 0x4120000421010000L, 0x0420010100210100L,
            0x0400010100200000L, 0x2000000020200004L, 0x8802080A40420208L, 0x4020000401010000L },
        {
            0x9D802FD127A732A1L, 0xBFDC94FCF7EDB4F6L, 0x50E28C54A198AD0EL, 0x09FCDB8FCCC9DDA8L,
            0x7ACEC81E5BAA6D25L, 0x10C9CBCF5BFEFC27L, 0x11A152F2C1A43FCAL, 0x6BA77CCFA2D9F407L,
            0x0E03AD8E4F36AD96L, 0xB405D697E680A2BBL, 0x3651B1301374F05DL, 0xEC2A3CD28E701034L,
            0xD793C96953AA22B3L, 0x81B56FC8F78827DDL, 0xA5F18C894182A861L, 0xF95F620C599E1A7DL },
        {
            0x6D9C774FB118B930L, 0x0AD4888256442919L, 0xB2625AFA68288616L, 0x3F682524B541B12DL,
            0x09FB30C77ED1253CL, 0xD276B00A56FA3BB2L, 0xD1A3ED2B432628E0L, 0x59DE47C408703466L,
            0x730C85F6CF7CD9B4L, 0xD731F331C620402DL, 0x664456562656A61EL, 0x10F001A72ABF1CCAL,
            0xE04F26164B84BCD5L, 0xE1CE43EA4AC71790L, 0xBE0A7BDA26AB8C3EL, 0x083CB972BE746F0DL },
        {
            0x9AE671BAC4106A33L, 0x2532A3AF80EB8C24L, 0x8807B8748AAF89BBL, 0xCCBD275D7AC0180CL,
            0x9E3C9A644E2EE2B1L, 0x6EF830BF37A17BB2L, 0xA56A3F09DA96ABC9L, 0x6674A590854EA97DL,
            0xD58BFB1A8D2677C5L, 0x5696D8DEA26A6D6DL, 0x2E973803C96922A4L, 0x9C8EC44641A390FDL,
            0xABE2F120F069F77AL, 0x305FE9E02B725884L, 0x1D2A9380316FE1A6L, 0x8FA5B15C10F77415L },
        {
            0xE7BC1BB342393A06L, 0x4497F473D8AE5B3AL, 0x238B885A51663B54L, 0xFCFD9F88948D42A7L,
            0x5B6E332077A59C5DL, 0xC798AA981789AC8DL, 0xF916664458B5AD3FL, 0xF7086A16B2407A56L,
            0x8DD6CEC45AC62D09L, 0x2C217A7DC1AB282CL, 0x8AA14855B8A7A065L, 0x1BA096650A8E8F6DL,
            0x9ECAB9E7A91D59FEL, 0xA57F363A65CF10D3L, 0xF16FCED7A605DFE9L, 0xC02D0A46B23E8C31L },
        {
            0x2FCA68C9B1691627L, 0x59E2B79D4B2A88F8L, 0xD44A3CC624C9028FL, 0x6295CCEC81F0F5AFL,
            0xAFBA11EEC8CE43A4L, 0xA6BC58426BDAB6ACL, 0xC9FA0754D15A38A6L, 0x61B7C093B862D551L,
            0xB7A8A66A9227EE06L, 0x17BEF1A5F98B7250L, 0xCCAA13033F5ADCD3L, 0x15CBCEF3A8A993B5L,
            0x2E321403DA39690BL, 0xD805E663071507B0L, 0x6D7EBAA185FF9F07L, 0x64071C2C7A0205EAL },
        {
            0xBF643FF50F9B521BL, 0xD6ECDEF9B9AC18B0L, 0x29C44312EB0ED72AL, 0x6AA97E4B4BF39E0AL,
            0xA957D54C2B38DF1BL, 0x23E4928A7504F6B8L, 0x6CFEE0C2D418DC84L, 0x10464EB477E6D548L,
            0x18A96DABB8BBC145L, 0x406A6EE1C806F1E4L, 0xA54BD0A7B7291B4AL, 0x27BC2F8593DD77BEL,
            0x3BE8FF6116D7AFB0L, 0x4D78AEB59B3A9C25L, 0x9F03C664A44601DCL, 0xDDBE9B34DA020E59L },
        {
            0xF51507DD9E95189FL, 0xAB5E0B1641FAD08FL, 0x09B7BF70943B60DEL, 0xE35D03636672DACDL,
            0x1D013C731A134DCDL, 0x850FC95D9CA677C8L, 0x48D78D3658CBE8D0L, 0x3898A93514FBF49DL,
            0x8849E2B60F59D433L, 0xA1C7E702A391D4B9L, 0xC0057990DE07D3EEL, 0x6BBF9A8B0E6CB108L,
            0x7DE67998BA91A9CEL, 0x68F2B4BC4B8F6A52L, 0x4EFE2C5711E64647L, 0x27173B06EFB20807L }
    };

    @Override
    protected Long[] getTraceG(int index) {
        return tracesG[index];
    }

    public void testG(int index) {
        System.out.println("G64 Trace " + index);
        Long[] trace = getTraceG(index);
        long a = trace[0];
        long b = trace[1];
        long c = trace[2];
        long d = trace[3];
        long ga = trace[4];
        long gb = trace[5];
        long gc = trace[6];
        long gd = trace[7];

        long[] input = { a, b, c, d };
        long[] expected = { ga, gb, gc, gd };

        Norx64.g(input);

        System.out.println(String.format("%016X %016X %016X %016X", a, b, c, d));
        System.out.println(String.format("%016X %016X %016X %016X", ga, gb, gc, gd));
        System.out.println(String.format("%016X %016X %016X %016X", input[0], input[1], input[2], input[3]));
        assertArrayEquals(expected, input);
        System.out.println("--> OK");
    }

    @Test
    public void testF() {
        for (int round = 1; round <= 8; round++) {
            System.out.println("Testing F" + round + " (W=32)");
            long[] state = {
                1, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0
            };
            for (int i = 0; i < round; i++) {
                Norx64.f(state);
            }
            assertArrayEquals(tracesF[round - 1], state);
        }
    }

}
